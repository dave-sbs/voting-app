-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

-----------------------------------------------------------------------------------------------------------------------------------------------------------

January 14, 2025
WYA
[D] Design UX for event creation and termination
    CREATION - DONE
    [D] Event creation is very straightforward and manual. - DONE
    [D] Admin will initially either join an existing event or create a new meeting - DONE
    - A new event means there is no data in the session
    - An existing event means there are active candidates and the voting process is happening, moreover, the admin can terminate the session

    TERMINATION - NEXT
    - Active sessions can either be manually terminated by the admin or automatically terminated after a certain amount of time

        MANUAL - NEXT
        - If admin requests export of voting data, they get a notification that the session will be terminated.
            - Exports terminate the session
            - So provide other forms of data visualization and analysis dahsboards so that admins can get a sense of progress

        AUTO - FUTURE DISCUSSION
        - If the admin does not request export, the session will automatically terminate after a certain amount of time (24 hours)

        EXPORTS - NEXT
            - The following data will be exported:
                - Checked In (Attendance) -- check_in table
                - Vote Tally -- active_candidates table
                - Unique Voters -- check_in table
                - Payment Records -- payments table
        
[D] Design UI for event creation and termination
    USER FLOW
    - It would make sense for the admin page to initially direct to the Event Creation page
    - Then the admin will be able to either join an existing event or create a new meeting
        - For either option, there will be a dropdown of General Meetings and Board Meetings to choose from.
    - A new event means there is no data in the session
    - An existing event means there are active candidates and the voting process is happening, moreover, the admin can terminate the session

    - After a session is terminated, provide a two hour window where admin can 'join' the session that was just closed and get analytics straight on the device. Once that window is over, remove all data from local state and reset the UI to the default state

[D] Design UX for payments page
    - Vendor payment
    - FOA Incentives


January 16, 2025
WYA
[D] Transfering the Current Event Object to the Admin Context
    [D] Need to add the current event to the Admin Context

Which components need the current event object?
    - Voter Check In
        UX
        - Voters can only check in if there is an open
        - If the meeting is a board meeting, they can only check in if there are a board member
        - We don't expect a general and board meeting to be open at the same time

    - Managing Active Candidates
        - The admin will always first create an event or join an existing event to add candidates to the event
        - The admin will then be able to add, update, and remove candidates from the event
        - If the admin terminates an event, the data gets exported and the current event object is reset to null. At the same time, the current candidates list is reset to null.


January 17, 2025
[D] Finalizing the event termination UX for V1
    [D] Terminate event, and get a log of summary of active candidates and check in data.

    V2
    [D] Set up Google Drive export function
    [D] Finalize the export data schema
    [D] Ensure data integrity
    [D] Reset the active candidates and voting records from database
    [D] Host Express server
    [] Add UI on admin page to terminate an event
    [] Add UI on admin page to view analytics of the event
    [] Create a Payments folder and add auto upload to drive when payment is recorded



Other bugs:
[D] The modal for adding a candidate has errors because I have two separate statements confirming addition of a candidate. One of them is a reflection of the actual db process, while the other is a reflection of the UI process. Need to remove the UI process statement.
[] When there are no open events, the sign in page redirects to an error screen, it should just show a modal and redirect back to the landing page.
    [] Works 50% of the time. Not sure why the useEffect() triggers only on certain occassions.
[D] Cannot allow creation of both general and board meetings at the same time. Need to disallow this. Otherwise, it would confuse the event recording system.


January 27, 2025
[D] UI bugs - finally figured out why I was getting so many issues. The tailwind config didn't have the right path to the components folder. It's been fixed!
    VOTER
    [D] I don't like the Select/Unselect UI for voters. The colors are not consistent with the rest of the app.
    [D] The hamburger menu is not sticking to the top of the screen, need to fix that

    ADMIN
        EVENTS
        [D] The events buttons need to utilize the isLoading and error states from the context file. Need to fix this.
        [D] Overall UI look and feel is polished.

        CANDIDATES
        [D] Idk why but the Candidate page UI changed. The title colors are different, the colors of the buttons are different, the font is different, the layout is different.

    PAYMENTS
        [] The payments buttons and whole page UI has been finalized. Need to test if the payment is being recorded correctly.

    MODAL
    [] Standardize the modal UI across the app. It's very inconsistent.



February 20, 2025
[] Supabase Logs out after 5-10 days of inactivity, if it 'pauses' then I have to manually go in and restart it which is a problem. Look into work arounds
-----------------------------------------------------------------------------------------------------------------------------------------------

[D] Build App for Testing
    - Currently the build process is broken. Currently, the issue is in the payments page. The Supabase client import does not work. 
    - If we look at the other 'tab' pages. They are mainly just importing and rendering components. They don't directly access the Supabase client. So, let me try to convert the payments page to a function component and see if that fixes the issue. 
    - If that doesn't work, keep the function component and then try to create a context manager for it.  

-----------------------------------------------------------------------------------------------------------------------------------------------


Project Notes
DONE
[D] App is borderline functional
[D] Voter page UI is more or less there. Need to implement the picture part
[D] Admin page has most functionalities set up
[D] Add Minimum Choice input in admin, add image upload in admin
[D] Users are not removed from the Tally table after being deleted which makes me think the Tally vote doesn't re-render properly
[D] Not sure if its tallyVotes() or TallyTable but the tallies aren't properly displayed
[D] Implement proper UI for admin page
[D] Fix voter page card layout
[D] Profile display section in Add Candidates behaves weirdly on phone.
[D] Implement SignIn and SignUp pages
[D] Remove username in Sign In
[D] Have Voter Count reset if all candidates have been removed
[D] Refine flow
[D] Make hamburger menu collapsable when user touches other areas of screen
[D] Remove the navigation tab on voting and admin pages
[D] New Voter Registration feature


TO DO
[D] Add date to vote tally table
[D] Unique Voter count acting somewhat weirdly
[D] Should I reset vote tally if voter data gets reset? 


QUESTIONS
[] Do we have a list for Board Members yet?
[] How to make sure that changes on Master are reflected on Board, and Check In
[] How to denote a session active or done for the Check In? Chat suggested using a 'session'/'event' tag that essentially denotes a given event. So no need to reset the table, just need to either manually set a new session or write a script that detects a new session. 
    [] For instance if a new check in is detected 12 hours after the previous one, then that could be a new session. 
    [] The session reports for attendance can then be easily emailed, printed, or even better stored in a Google Drive.


[] Let's finish everything with Active Candidates
    [] Create a Design Doc for the whole process
    [] UI = Admin UI and Voting UI
    [] Make sure newly added candidates render in real time
    [] Make sure removed candidates are removed from in the UI as well



[] People with the same name?
    [] It currently resets the tally, even if both appear on the voter page and on the current candidates list
    [] On the voter page, they share the same name so they will both activate and deactivate
[] What happens with Unique Vote Count when all people have been removed?
    [] I think it doesn't store state in a conventional way either. I think it resets on some instances - test more tomorrow!
[] Do we want Sign up
    [] There is no way to protect it
    [] What if someone forgets the username or password?


BLOG
New Features
- The database architecture and the decision process behind the system
- The front end architecture and the decision process behind the system
- General discussion around design


Old thoughts
so I was thinking we could implement this feature by first creating an object array - let's call it votersArray - in CandidatesContext. This array gets populated when voters register, and is also used to check in voters that are already in the array. I am not sure what exact props we want each voter object to have though. So far I'm thinking registration date, name, unique ID, and voting status

Once registered and checked in, voters then go to voting page and cast their vote which will then be logged by changing the voting status.

While that is happening on the backend, we will create some new screens on the front end.
Registration and Check In pages will now be the default pages to show on index.tsx. 

Both of them will lead to a landing page welcoming them (Currently the content in index.tsx), and then lead to the voting screen. During this process the voter ID will be somehow remembered so that the voting status can be changed if the vote is cast.

The voter ID will be removed/reset, under the following conditions:
1. Voter Signs Out (new feature that needs to be implemented)
2. Voter casts vote

Both options should redirect voters back to index.tsx which will show them the option of either Registering to vote or Checking in.

Then we will also implement a final screen - SummaryPage.tsx.
This screen will essentially display the essential details of each voter such as their ID, name, and voting status

Now some follow up questions that I still need to think about are:
1. Do we disable second-time voting for people that have already voted?
2. Do we want to log the time and frequency of check ins for each voter?
3. What should the register and check in process look like? 
    - Just Name?
    - Name and ID







